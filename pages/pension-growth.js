import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Investment.module.css";
import { useState } from "react";
import "../node_modules/react-vis/dist/style.css";
import {
  XYPlot,
  LineSeries,
  VerticalGridLines,
  HorizontalGridLines,
  XAxis,
  YAxis,
  Crosshair,
} from "react-vis";

const state = {
  pot: 35000,
  salary: 95000,
  ownContributionPercent: 10,
  employerContributionPercent: 5,
  growth: 5,
  graphData: [{ x: 0, y: 0 }],
  retireBy: 2045, // 55, the year 2045 onwards will no longer receive contributions
  years: 40,
  lumpSum: true,
};

const yMax = 1200000;
const LTA = 1073100;
const accessYear = 2047

function formatNumber(number) {
  return number.toFixed(2); // todo: legibility commas
}

export default function PensionGrowth() {
  const [pot, setPot] = useState(state.pot);
  const [lumpSum, setLumpSum] = useState(state.lumpSum)
  const [salary, setSalary] = useState(state.salary);
  const [ownContributionPercent, setOwnContributionPercent] = useState(
    state.ownContributionPercent
  );
  const [employerContributionPercent, setEmployerContributionPercent] =
    useState(state.employerContributionPercent);
  const [growth, setGrowth] = useState(state.growth);
  const [years, setYears] = useState(50);
  const [retireBy, setRetireBy] = useState(state.retireBy);
  const [crosshairValues, setCrosshairValues] = useState([]);


  function updateOwnContribution(event) {
    updateIfValidNumber(event, setOwnContributionPercent);
  }

  function updateEmployerContribution(event) {
    updateIfValidNumber(event, setEmployerContributionPercent);
  }

  function updateSalary(event) {
    updateIfValidNumber(event, setSalary);
  }

  function updatePot(event) {
    updateIfValidNumber(event, setPot);
  }

  function updateGrowth(event) {
    updateIfValidNumber(event, setGrowth);
  }

  function updateYears(event) {
    updateIfValidNumber(event, setYears);
  }

  function updateRetireBy(event) {
    updateIfValidNumber(event, setRetireBy);
  }
  function updateLumpSum(event) {
      console.log(event.target.checked)
      setLumpSum(event.target.checked)
  }

  function getGraphData() {
    const data = [];
    let tally = pot;
    const monthsLeftInYear = 12 - new Date().getMonth();
    const remainderOfYearContribution =
      monthsLeftInYear *
      (((employerContributionPercent / 100 + ownContributionPercent / 100) *
        salary) /
        12);
    tally += remainderOfYearContribution;
    data.push({ y: tally, x: 2021 });
    for (let i = 1; i < years; i++) {
      const year = 2021 + i;
      let contribution = 0;
      if (year < retireBy) {
        // current year subtracted but remaining months have been added
        // fix to grow monthly https://www.asimplemodel.com/reference/117/converting-an-annual-growth-rate-to-a-monthly-growth-rate/
        contribution =
          (employerContributionPercent / 100 + ownContributionPercent / 100) *
          salary;
      }
      tally = (tally + contribution) * (1 + growth / 100);
      if (lumpSum && year === accessYear) { 
          tally = 0.75 * tally
      }
      data.push({ y: tally, x: year });
    }

    return data;
  }

  function updateIfValidNumber(event, updateFn) {
    const val = event.target.value;
    if (val !== undefined && val !== "") {
      updateFn(Number(val));
    } else {
      console.log("NOT UPDATING");
    }
  }
  const graphData = getGraphData();
  console.log('lump sum', lumpSum)
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.grid}>
          <XYPlot
          animation={true}
            height={300}
            width={600}
            yDomain={[0, yMax]}
            xDomain={[2021, 2021 + years]}
            margin={{ left: 100, right: 50 }}
            onMouseLeave={() => setCrosshairValues([])}
          >
            <LineSeries
              key="chart"
              data={graphData}
              onNearestX={(value, { index }) => {
                setCrosshairValues([value]);
              }}
            />
            <LineSeries
              key="crossline"
              data={[
                { x: retireBy, y: 0 },
                { x: retireBy, y: yMax },
              ]}
              strokeStyle="solid"
              style={{ stroke: "#14d733" }}
            />
            <LineSeries
              key="lifetimeallowance"
              data={[
                { x: 2021, y: LTA },
                { x: 2021 + years, y: LTA },
              ]}
              strokeStyle="solid"
              style={{ stroke: "#bb1212" }}
            />
            <LineSeries
              key="accessyear"
              data={[
                { x: accessYear, y: 0 },
                { x: accessYear, y: yMax },
              ]}
              strokeStyle="solid"
              style={{ stroke: "#9107c191" }}
            />
            <XAxis tickFormat={(val) => val} tickTotal={4} />
            <YAxis tickFormat={(val) => "£" + val} />
            <VerticalGridLines />
            <HorizontalGridLines />
            <Crosshair
              values={crosshairValues}
              titleFormat={(items) => ({
                title: items[0].x,
                value: "£" + formatNumber(items[0].y),
              })}
              itemsFormat={(items) => []}
            />
          </XYPlot>
        </div>
        <div className={styles.grid}>
          <form className={styles.inputs}>
            <div className={styles.inputWrapper}>
              <label>Starting value</label>
              <input type="number" value={pot} onChange={updatePot}></input>
            </div>
            <div className={styles.inputWrapper}>
              <label>Own Contribution %</label>
              <input
                type="number"
                value={ownContributionPercent}
                onChange={updateOwnContribution}
              ></input>
            </div>
            <div className={styles.inputWrapper}>
              <label>Employer Contribution %</label>
              <input
                type="number"
                value={employerContributionPercent}
                onChange={updateEmployerContribution}
              ></input>
            </div>
            <div className={styles.inputWrapper}>
              <label>Annual Growth %</label>
              <input
                type="number"
                value={growth}
                onChange={updateGrowth}
              ></input>
            </div>
            <div className={styles.inputWrapper}>
              <label>Salary</label>
              <input
                type="number"
                value={salary}
                onChange={updateSalary}
              ></input>
            </div>
            <div className={styles.inputWrapper}>
              <label>Years</label>
              <input type="number" value={years} onChange={updateYears}></input>
            </div>
            <div className={styles.inputWrapper}>
              <label>Retire By</label>
              <input
                type="number"
                value={retireBy}
                onChange={updateRetireBy}
              ></input>
            </div>
            <div className={styles.inputWrapper}>
              <label>Take 25% lump sum</label>
              <input
                type="checkbox"
                checked={lumpSum}
                onChange={updateLumpSum}
              ></input>
            </div>
          </form>
          <div className={styles.graph}></div>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
